buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

apply plugin: 'forge'

version = "1.0"
group = "org.rainyville.serverguard" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "serverguard"
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    mappings = "snapshot_20140925"

    srgExtra "PK: net/dv8tion/jda org/rainyville/serverguard/repack/net/dv8tion/jda"
    srgExtra "PK: org/sqlite org/rainyville/serverguard/repack/org/sqlite"
    srgExtra "PK: org/slf4j/impl org/rainyville/serverguard/repack/org/slf4j/impl"
}

runClient {
    args '--username', project.property('username')
}

configurations {
    shade
    compile.extendsFrom(shade)
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    shade 'com.googlecode.efficient-java-matrix-library:ejml:0.25'
    shade group: 'org.xerial', name: 'sqlite-jdbc', version: '3.30.1'
    shade('net.dv8tion:JDA:3.8.3_464') { exclude module: 'opus-java' }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, that's not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
